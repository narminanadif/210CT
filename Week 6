class BinTreeNode(object):

    def __init__(self, value):
        self.value=value
        self.left=None
        self.right=None
        
def tree_insert( tree, item):
    if tree==None:
        tree=BinTreeNode(item)
    else:
        if(item < tree.value):
            if(tree.left==None):
                tree.left=BinTreeNode(item)
            else:
                tree_insert(tree.left,item)
        else:
            if(tree.right==None):
                tree.right=BinTreeNode(item)
            else:
                tree_insert(tree.right,item)
    return tree

def postorder(tree):
    if(tree.left!=None):
        postorder(tree.left)
    if(tree.right!=None):
        postorder(tree.right)
    print (tree.value)
  

#def in_order(tree):
    #if(tree.left!=None):
        #in_order(tree.left)
    #print (tree.value)
    #if(tree.right!=None):
        #in_order(tree.right)

def in_order(tree):
#constructing an empty list 
    nlist=[]
    nsort = True
#sort the node into ascending order until notsorted becomes false 
    while nsort is True:
#if the tree node is not none then the node is appended to the node list 
        if tree is not None:
            nlist.append(tree)
            tree = tree.left
#if the nlist length is >0 then print them outside of the list
        elif(len(nlist) > 0):
#remove it from the list and print it from the end of the list 
            tree = nlist.pop()
            print(tree.value)
            tree = tree.right
        else:
            nsort is False
        
if __name__ == '__main__':
    
  t=tree_insert(None,6);
  tree_insert(t,10)
  tree_insert(t,5)
  tree_insert(t,2)
  tree_insert(t,3)
  tree_insert(t,4)
  tree_insert(t,11)
  in_order(t)
